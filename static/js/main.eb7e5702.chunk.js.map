{"version":3,"sources":["components/Todoitems.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","getStyle","background","props","todo","completed","textDecoration","padding","border","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","className","Component","float","cursor","Todos","todos","map","key","headerStyler","color","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","flex","aria-label","aria-describedby","placeholder","About","Fragment","App","axios","delete","then","res","filter","post","comlpeted","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb7e5702.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Todoitems extends Component {\n    getStyle = () =>{\n        return {\n            background: this.props.todo.completed ? '#fff' : '#a8a1a2bd',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n            padding: '18px',\n            border: this.props.todo.completed ?  '1px #000 solid' : '1px #000 dashed'\n        }\n    }\n\n    // markComplete = (e) => { //Arrow function using this.markComplete.bind(this)\n    //     //e.preventDefault()\n    //     console.log(this.props)\n        \n    // }\n    render() {\n        const {id, title} = this.props.todo\n        return (\n            <div style={this.getStyle()}>\n                <h3>\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />{'  '}\n                {title}\n                <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)} className=\"btn btn-danger\">Delete</button></h3> \n            </div>\n        )\n    }\n}\n\nTodoitems.propTypes = {\n    todo: PropTypes.object.isRequired   //.isReq means it need to have a single child\n}    \n\nconst btnStyle = {\n    float:'right',\n    cursor: 'pointer'\n}\n\nTodoitems.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}  \n\nexport default Todoitems\n","import React, {Component} from 'react';\nimport Todoitems from './Todoitems';\nimport PropTypes from 'prop-types'\n\n// as es6 we may use\n//class App extends Component\n// render() (<div...)\nclass Todos extends Component {\nrender(){\n    //console.log(this.props.todos)\n    return this.props.todos.map((todo) => (\n       // <h3>{ todo.title }</h3>\n       <Todoitems todo={todo} key={todo.id} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />    //passing child prop todo to Todoitems\n    ))\n}\n}\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}    \n\nexport default Todos;","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction Header() {\n    return (\n        <header style={headerStyler}>\n            <h1>ToDo App</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\nconst headerStyler={\n    background: '#333',\n    color:'#fff',\n    textAlign: 'center',\n    padding:'10px'\n}\n\nconst linkStyle={\n    color:\"#fff\"\n}\n\nexport default Header;\n","import React, { Component } from 'react'\nimport '../bootstrap/css/bootstrap.css'\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n    onChange = (e) => this.setState({ \n        [e.target.name] : e.target.value \n    })\n\n    onSubmit = (e) => {\n        e.preventDefault(); //learn\n        this.props.addTodo(this.state.title)\n        this.setState({ title : '' })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} >\n                <input \n                style ={{ flex:'10', padding:'5px' }}\n                className =\"form-control\" \n                aria-label=\"Sizing example input\" \n                aria-describedby=\"inputGroup-sizing-lg\"\n                type=\"text\" \n                name=\"title\" \n                placeholder=\"Add a Todo...(It may take a few seconds to update/delete the Todos)\"\n                value = {this.state.title}\n                onChange={this.onChange}\n                />\n                {/* <div className=\"form-group\"> */}\n                <button type=\"submit\" \n                style= {{ flex:'1' }}\n                className=\"btn btn-primary\">Submit</button>\n                {/* </div> */}\n            </form>\n        )\n    }\n}\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired \n}\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1 style={{ textAlign:'center' }} >About</h1>\n            <h3 style={{ color:\"#e43\", textAlign:'center' }}>This is a TodoApp v1.0.0</h3>\n        </React.Fragment>\n    )\n}\n\nexport default About\n","import React, {Component} from 'react';\n//import { Button } from '../node_modules/react-bootstrap';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './bootstrap/css/bootstrap.css'\n//import Todoitems from './components/Todoitems';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header'\nimport AddTodo from './components/AddTodo'\nimport About from './components/pages/About'\n// import {v4 as uuid} from 'uuid'\nimport axios from 'axios'\nimport './App.css'\n\n//import { render } from '@testing-library/react';\n\n// as es6 we may use\n//class App extends Component\n// render() (<div...)\nclass App extends Component{\n  state = {\n        todos: []\n    }\n\n    componentDidMount(){\n      axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({todos: res.data})) \n    }\n\n    markComplete = (id) => {\n      this.setState({ todos : this.state.todos.map(todo =>{ //mapping for each todo in todos\n        if(todo.id === id)\n        {\n          todo.completed = !todo.completed  //toggle the value\n        }\n        return todo\n      })\n    })\n    }\n\n    //DEl Todo\n    delTodo = (id) =>{\n      axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res =>this.setState({todos : [...this.state.todos.filter(todo => \n        todo.id !== id\n        )]\n      }))\n    }\n\n    //addTodo\n    addTodo = (title) =>{\n      //console.log(title)\n      // const newTodo = {\n      //   id: uuid() ,\n      //   title: title,\n      //   completed: false \n      // }\n      // this.setState({ todos: [...this.state.todos, newTodo] })\n      axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        comlpeted: false\n      })\n      .then(res => this.setState({\n        todos: [...this.state.todos, res.data] \n      }))\n    }\n\n\n    render(){\n    //console.log(this.state.todos);  //Render App Component\n    return (\n      <Router>\n    <div className=\"App\">\n    <div className=\"container\">\n    <Header/>\n    <Route exact path=\"/\" render={props => (\n      <React.Fragment>\n      <AddTodo addTodo={this.addTodo} />\n      <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />  \n      {/* <Todoitems/> */}\n      {/* Add todos list as prop/attribute to the Todos Component */}\n      {' '}\n      </React.Fragment>\n    )}/>\n    <Route path=\"/about\" component={About}/>\n\n    </div>\n    </div>\n    </Router> \n  )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}